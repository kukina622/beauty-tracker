# Uncomment this line to define a global platform for your project
# platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end

  generate_env_xcconfig
end

def generate_env_xcconfig
  debug_mode = ENV['CONFIGURATION'] == 'Debug' || ENV['FLUTTER_BUILD_MODE'] == 'debug'
  
  env_filename = debug_mode ? '.env.development' : '.env.production'

  env_file = File.join(File.dirname(__FILE__), '../.env')
  xcconfig_file = File.join(File.dirname(__FILE__), 'Env.xcconfig')
  
  puts "üîß Generating Env.xcconfig from .env file..."
  
  # ÂâµÂª∫ xcconfig ÂÖßÂÆπ
  xcconfig_content = "// Auto-generated from .env - DO NOT EDIT\n"
  xcconfig_content += "// Generated at: #{Time.now}\n\n"
  
  if File.exist?(env_file)
    File.readlines(env_file).each do |line|
      line = line.strip
      next if line.start_with?('#') || line.empty?
      
      if line.include?('=')
        key, value = line.split('=', 2)
        key = key.strip
        value = value.strip.gsub(/^["']|["']$/, '')
        
        xcconfig_content += "#{key} = #{value}\n"
        puts "‚úÖ Added #{key} to xcconfig"
      end
    end
  else
    puts "‚ö†Ô∏è  .env file not found, creating empty xcconfig"
    xcconfig_content += "// No .env file found\n"
  end
  
  # ÂØ´ÂÖ• xcconfig Êñá‰ª∂
  File.write(xcconfig_file, xcconfig_content)
  puts "üìÑ Generated #{xcconfig_file}"
end
